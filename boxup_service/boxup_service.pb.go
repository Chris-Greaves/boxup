// Code generated by protoc-gen-go. DO NOT EDIT.
// source: boxup_service.proto

package BoxUp

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SearchQuery struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchQuery) Reset()         { *m = SearchQuery{} }
func (m *SearchQuery) String() string { return proto.CompactTextString(m) }
func (*SearchQuery) ProtoMessage()    {}
func (*SearchQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecc3ca1a8dc2fa02, []int{0}
}

func (m *SearchQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchQuery.Unmarshal(m, b)
}
func (m *SearchQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchQuery.Marshal(b, m, deterministic)
}
func (m *SearchQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchQuery.Merge(m, src)
}
func (m *SearchQuery) XXX_Size() int {
	return xxx_messageInfo_SearchQuery.Size(m)
}
func (m *SearchQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchQuery.DiscardUnknown(m)
}

var xxx_messageInfo_SearchQuery proto.InternalMessageInfo

type BoxInfo struct {
	Name                 string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BoxInfo) Reset()         { *m = BoxInfo{} }
func (m *BoxInfo) String() string { return proto.CompactTextString(m) }
func (*BoxInfo) ProtoMessage()    {}
func (*BoxInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecc3ca1a8dc2fa02, []int{1}
}

func (m *BoxInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BoxInfo.Unmarshal(m, b)
}
func (m *BoxInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BoxInfo.Marshal(b, m, deterministic)
}
func (m *BoxInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BoxInfo.Merge(m, src)
}
func (m *BoxInfo) XXX_Size() int {
	return xxx_messageInfo_BoxInfo.Size(m)
}
func (m *BoxInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BoxInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BoxInfo proto.InternalMessageInfo

func (m *BoxInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type BoxChunk struct {
	Filename             string   `protobuf:"bytes,1,opt,name=Filename,proto3" json:"Filename,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BoxChunk) Reset()         { *m = BoxChunk{} }
func (m *BoxChunk) String() string { return proto.CompactTextString(m) }
func (*BoxChunk) ProtoMessage()    {}
func (*BoxChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecc3ca1a8dc2fa02, []int{2}
}

func (m *BoxChunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BoxChunk.Unmarshal(m, b)
}
func (m *BoxChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BoxChunk.Marshal(b, m, deterministic)
}
func (m *BoxChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BoxChunk.Merge(m, src)
}
func (m *BoxChunk) XXX_Size() int {
	return xxx_messageInfo_BoxChunk.Size(m)
}
func (m *BoxChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_BoxChunk.DiscardUnknown(m)
}

var xxx_messageInfo_BoxChunk proto.InternalMessageInfo

func (m *BoxChunk) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *BoxChunk) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*SearchQuery)(nil), "BoxUp.SearchQuery")
	proto.RegisterType((*BoxInfo)(nil), "BoxUp.BoxInfo")
	proto.RegisterType((*BoxChunk)(nil), "BoxUp.BoxChunk")
}

func init() { proto.RegisterFile("boxup_service.proto", fileDescriptor_ecc3ca1a8dc2fa02) }

var fileDescriptor_ecc3ca1a8dc2fa02 = []byte{
	// 209 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4e, 0xca, 0xaf, 0x28,
	0x2d, 0x88, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0x62, 0x75, 0xca, 0xaf, 0x08, 0x2d, 0x50, 0xe2, 0xe5, 0xe2, 0x0e, 0x4e, 0x4d, 0x2c, 0x4a, 0xce,
	0x08, 0x2c, 0x4d, 0x2d, 0xaa, 0x54, 0x92, 0xe5, 0x62, 0x77, 0xca, 0xaf, 0xf0, 0xcc, 0x4b, 0xcb,
	0x17, 0x12, 0xe2, 0x62, 0xf1, 0x4b, 0xcc, 0x4d, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02,
	0xb3, 0x95, 0xac, 0xb8, 0x38, 0x9c, 0xf2, 0x2b, 0x9c, 0x33, 0x4a, 0xf3, 0xb2, 0x85, 0xa4, 0xb8,
	0x38, 0xdc, 0x32, 0x73, 0x52, 0xf3, 0x10, 0x6a, 0xe0, 0x7c, 0x90, 0x5e, 0x97, 0xc4, 0x92, 0x44,
	0x09, 0x26, 0x05, 0x46, 0x0d, 0x9e, 0x20, 0x30, 0xdb, 0x68, 0x3a, 0x23, 0x17, 0x0f, 0xd8, 0xce,
	0x60, 0x88, 0x3b, 0x84, 0xf4, 0xb8, 0x58, 0x7c, 0x32, 0x8b, 0x4b, 0x84, 0x84, 0xf4, 0xc0, 0xc2,
	0x7a, 0x48, 0xee, 0x90, 0xe2, 0x83, 0x8a, 0x41, 0x1d, 0xa3, 0xc4, 0x60, 0xc0, 0x28, 0xa4, 0xc5,
	0xc5, 0xec, 0x9e, 0x5a, 0x22, 0x84, 0x26, 0x25, 0xc5, 0x8f, 0xe0, 0x83, 0x1d, 0x06, 0x56, 0xab,
	0xcd, 0xc5, 0x12, 0x9c, 0x9a, 0x97, 0x22, 0x84, 0x2e, 0x89, 0x69, 0xb0, 0x06, 0x63, 0x12, 0x1b,
	0x38, 0x44, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x3c, 0x66, 0x23, 0x57, 0x28, 0x01, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BoxUpServiceClient is the client API for BoxUpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BoxUpServiceClient interface {
	List(ctx context.Context, in *SearchQuery, opts ...grpc.CallOption) (BoxUpService_ListClient, error)
	Get(ctx context.Context, in *BoxInfo, opts ...grpc.CallOption) (BoxUpService_GetClient, error)
	Send(ctx context.Context, opts ...grpc.CallOption) (BoxUpService_SendClient, error)
}

type boxUpServiceClient struct {
	cc *grpc.ClientConn
}

func NewBoxUpServiceClient(cc *grpc.ClientConn) BoxUpServiceClient {
	return &boxUpServiceClient{cc}
}

func (c *boxUpServiceClient) List(ctx context.Context, in *SearchQuery, opts ...grpc.CallOption) (BoxUpService_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BoxUpService_serviceDesc.Streams[0], "/BoxUp.BoxUpService/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &boxUpServiceListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BoxUpService_ListClient interface {
	Recv() (*BoxInfo, error)
	grpc.ClientStream
}

type boxUpServiceListClient struct {
	grpc.ClientStream
}

func (x *boxUpServiceListClient) Recv() (*BoxInfo, error) {
	m := new(BoxInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *boxUpServiceClient) Get(ctx context.Context, in *BoxInfo, opts ...grpc.CallOption) (BoxUpService_GetClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BoxUpService_serviceDesc.Streams[1], "/BoxUp.BoxUpService/Get", opts...)
	if err != nil {
		return nil, err
	}
	x := &boxUpServiceGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BoxUpService_GetClient interface {
	Recv() (*BoxChunk, error)
	grpc.ClientStream
}

type boxUpServiceGetClient struct {
	grpc.ClientStream
}

func (x *boxUpServiceGetClient) Recv() (*BoxChunk, error) {
	m := new(BoxChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *boxUpServiceClient) Send(ctx context.Context, opts ...grpc.CallOption) (BoxUpService_SendClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BoxUpService_serviceDesc.Streams[2], "/BoxUp.BoxUpService/Send", opts...)
	if err != nil {
		return nil, err
	}
	x := &boxUpServiceSendClient{stream}
	return x, nil
}

type BoxUpService_SendClient interface {
	Send(*BoxChunk) error
	CloseAndRecv() (*BoxInfo, error)
	grpc.ClientStream
}

type boxUpServiceSendClient struct {
	grpc.ClientStream
}

func (x *boxUpServiceSendClient) Send(m *BoxChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *boxUpServiceSendClient) CloseAndRecv() (*BoxInfo, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(BoxInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BoxUpServiceServer is the server API for BoxUpService service.
type BoxUpServiceServer interface {
	List(*SearchQuery, BoxUpService_ListServer) error
	Get(*BoxInfo, BoxUpService_GetServer) error
	Send(BoxUpService_SendServer) error
}

// UnimplementedBoxUpServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBoxUpServiceServer struct {
}

func (*UnimplementedBoxUpServiceServer) List(req *SearchQuery, srv BoxUpService_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedBoxUpServiceServer) Get(req *BoxInfo, srv BoxUpService_GetServer) error {
	return status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedBoxUpServiceServer) Send(srv BoxUpService_SendServer) error {
	return status.Errorf(codes.Unimplemented, "method Send not implemented")
}

func RegisterBoxUpServiceServer(s *grpc.Server, srv BoxUpServiceServer) {
	s.RegisterService(&_BoxUpService_serviceDesc, srv)
}

func _BoxUpService_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BoxUpServiceServer).List(m, &boxUpServiceListServer{stream})
}

type BoxUpService_ListServer interface {
	Send(*BoxInfo) error
	grpc.ServerStream
}

type boxUpServiceListServer struct {
	grpc.ServerStream
}

func (x *boxUpServiceListServer) Send(m *BoxInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _BoxUpService_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BoxInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BoxUpServiceServer).Get(m, &boxUpServiceGetServer{stream})
}

type BoxUpService_GetServer interface {
	Send(*BoxChunk) error
	grpc.ServerStream
}

type boxUpServiceGetServer struct {
	grpc.ServerStream
}

func (x *boxUpServiceGetServer) Send(m *BoxChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _BoxUpService_Send_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BoxUpServiceServer).Send(&boxUpServiceSendServer{stream})
}

type BoxUpService_SendServer interface {
	SendAndClose(*BoxInfo) error
	Recv() (*BoxChunk, error)
	grpc.ServerStream
}

type boxUpServiceSendServer struct {
	grpc.ServerStream
}

func (x *boxUpServiceSendServer) SendAndClose(m *BoxInfo) error {
	return x.ServerStream.SendMsg(m)
}

func (x *boxUpServiceSendServer) Recv() (*BoxChunk, error) {
	m := new(BoxChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _BoxUpService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "BoxUp.BoxUpService",
	HandlerType: (*BoxUpServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _BoxUpService_List_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Get",
			Handler:       _BoxUpService_Get_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Send",
			Handler:       _BoxUpService_Send_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "boxup_service.proto",
}
